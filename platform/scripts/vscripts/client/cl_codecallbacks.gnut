global function ClientCodeCallback_BodyGroupChanged

global function ClientCodeCallback_UseEntGainedFocus
global function ClientCodeCallback_UseEntLostFocus
global function ClientCodeCallback_GetUseEntOverrideText

global function AddCallback_OnPlayerConsumableInventoryChanged
global function ClientCodeCallback_OnPlayerConsumableInventoryChanged

global function AddEntityCallback_GetUseEntOverrideText

global function AddCallback_OnPetTitanChanged
global function ClientCodeCallback_OnPetTitanModeChanged
global function AddCallback_OnPetTitanModeChanged
global function ClientCodeCallback_OnPetTitanChanged

global function IsCurrentlyFocusedWeapon

global function ClientCodeCallback_PingSpecificType
global function SetCallback_PingSpecificType
global function RemoveCallback_PingSpecificType

global function ClientCodeCallback_UseConsumable
global function SetCallback_UseConsumable
global function RemoveCallback_UseConsumable

global function NvidiaReflex_SetValues
global function NvidiaReflex_SetSettingsValue

global function ServerCallback_RefreshWeaponHighlights
global function Promo_SetVersion

struct
{
	var                                flyoutRUI
	var                                lastWeaponRuiSet
	entity                             focusedEnt
	table<string, asset>               modImages
	void functionref( entity, string ) pingCallback = null
	void functionref( entity, string ) useConsumableCallback = null
} file

void function ClientCodeCallback_PingSpecificType( entity player, string pingType )
{
	if ( file.pingCallback != null )
		file.pingCallback( player, pingType )
}


void function SetCallback_PingSpecificType( void functionref( entity, string ) callback )
{
	Assert( file.pingCallback == null, "Ping callback already exists! Cannot have more than 1 ping callback" )
	file.pingCallback = callback
}


void function RemoveCallback_PingSpecificType()
{
	if ( file.pingCallback == null )
		Warning( "Attempted to remove ping callback when nothing has been set" )

	file.pingCallback = null
}


void function ClientCodeCallback_UseConsumable( entity player, string consumableType )
{
	if ( file.useConsumableCallback != null )
		file.useConsumableCallback( player, consumableType )
}


void function SetCallback_UseConsumable( void functionref( entity, string ) callback )
{
	Assert( file.useConsumableCallback == null, "Consumable callback already exists! Cannot have more than 1 Consumable callback" )
	file.useConsumableCallback = callback
}


void function RemoveCallback_UseConsumable()
{
	if ( file.useConsumableCallback == null )
		Warning( "Attempted to remove consumable callback when nothing has been set" )

	file.useConsumableCallback = null
}


void function ClientCodeCallback_BodyGroupChanged( entity ent, int bodyGroupIndex, int oldState, int newState )
{
//	PrintFunc( "entity " + ent + " index " + bodyGroupIndex + "newstate " + newState )

	if ( IsSpectre( ent ) || IsStalker( ent ) )
	{
		if ( bodyGroupIndex == ent.FindBodygroup( "removableHead" ) )
		{
			ModelFX_DisableGroup( ent, "foe_lights" )
			ModelFX_DisableGroup( ent, "friend_lights" )
		}
	}
}


void function ClientCodeCallback_UseEntGainedFocus( entity ent )
{
	foreach ( callbackFunc in clGlobal.onUseEntGainFocusCallbacks )
	{
		callbackFunc( ent )
	}

	if ( ent.GetNetworkedClassName() == "weaponx" )
	{
		var rui = ClWeaponStatus_GetWeaponHudRui( GetLocalViewPlayer(), ent )
		if ( rui != null )
		{
			RuiSetBool( rui, "isHighlighted", true )
			file.lastWeaponRuiSet = rui
		}
	}

	file.focusedEnt = ent

	ManageHighlightEntity( ent )
}


void function ClientCodeCallback_UseEntLostFocus( entity ent )
{
	foreach ( callbackFunc in clGlobal.onUseEntLoseFocusCallbacks )
	{
		callbackFunc( ent )
	}

	if ( file.lastWeaponRuiSet != null )
	{
		RuiSetBool( file.lastWeaponRuiSet, "isHighlighted", false )
		file.lastWeaponRuiSet = null
	}

	if ( file.focusedEnt == ent )
	{
		file.focusedEnt = null
	}

	if ( IsValid( ent ) )
		ManageHighlightEntity( ent )
}


string function ClientCodeCallback_GetUseEntOverrideText( entity ent )
{
	string textOverride = ""
	if ( IsValid( ent.e.entTextOverrideCallback ) )
	{
		textOverride = ent.e.entTextOverrideCallback( ent )
	}

	return textOverride
}


void function AddEntityCallback_GetUseEntOverrideText( entity ent, string functionref( entity ) callback )
{
	Assert( !IsValid( ent.e.entTextOverrideCallback ), "Use ent override text callback already set for entity." )
	ent.e.entTextOverrideCallback = callback
}


bool function IsCurrentlyFocusedWeapon( entity ent )
{
	return file.focusedEnt == ent
}


void function ServerCallback_RefreshWeaponHighlights( int eHandle )
{
	entity weapon = GetEntityFromEncodedEHandle( eHandle )
	if ( weapon != null )
		ManageHighlightEntity( weapon )
}


void function AddCallback_OnPetTitanChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.onPetTitanChangedCallbacks.append( callbackFunc )
}


void function ClientCodeCallback_OnPetTitanChanged( entity player )
{
}


void function ClientCodeCallback_OnPetTitanModeChanged( entity player )
{
	if ( !IsValid( player ) || player != GetLocalViewPlayer() )
		return

	if ( !IsValid( player.GetPetTitan() ) ) // should be an assert...
		return

	player.Signal( "PetTitanModeChanged" )

	// Added via AddCallback_OnPetTitanModeChanged
	foreach ( callbackFunc in clGlobal.onPetTitanModeChangedCallbacks )
	{
		callbackFunc( player )
	}
}


void function AddCallback_OnPetTitanModeChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.onPetTitanModeChangedCallbacks.append( callbackFunc )
}


void function ClientCodeCallback_OnPlayerConsumableInventoryChanged( entity player )
{
	//printt( "ClientCodeCallback_OnPlayerConsumableInventoryChanged" )
	if ( !IsValid( player ) || player != GetLocalViewPlayer() )
		return

	// Added via AddCallback_OnPlayerConsumableInventoryChanged
	foreach ( callbackFunc in clGlobal.consumableInventoryChangedCallbacks )
	{
		callbackFunc( player )
	}
}


void function AddCallback_OnPlayerConsumableInventoryChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.consumableInventoryChangedCallbacks.append( callbackFunc )
}

void function Promo_SetVersion( int version )
{
	int promo_version_accepted

	try{
		promo_version_accepted = GetConVarInt( "promo_version_accepted" )
	}catch(e420)
	{
		printt( "Promo version cvar not present in your current r5sdk install!" )
		return
	}

	SetConVarInt( "promo_version_accepted", version )
}

void function NvidiaReflex_SetValues()
{
	int settingsReflex

	try{
		settingsReflex = GetConVarInt( "settings_reflex" )
	}catch(e420)
	{
		printt( "Nvidia Reflex cvars not present in your current r5sdk install!" )
		return
	}

	switch( settingsReflex )
	{
	  case 0: //Off
		SetConVarInt( "gfx_nvnUseLowLatency", 0 )
		SetConVarInt( "gfx_nvnUseLowLatencyBoost", 0 )
		break
	  case 1: //On
		SetConVarInt( "gfx_nvnUseLowLatency", 1 )
		SetConVarInt( "gfx_nvnUseLowLatencyBoost", 0 )
		break
	  case 2: //On + Boost
		SetConVarInt( "gfx_nvnUseLowLatency", 1 )
		SetConVarInt( "gfx_nvnUseLowLatencyBoost", 1 )
		break
	}
}

void function NvidiaReflex_SetSettingsValue()
{
	bool lowLatency
	bool lowLatencyBoost

	try{
		lowLatency = GetConVarBool( "gfx_nvnUseLowLatency" )
		lowLatencyBoost = GetConVarBool( "gfx_nvnUseLowLatencyBoost" )
	}catch(e420)
	{
		printt( "Nvidia Reflex cvars not present in your current r5sdk install!" )
		return
	}

	if( !lowLatency && !lowLatencyBoost )
	{
		SetConVarInt( "settings_reflex", 0 )
	} else if( lowLatency && !lowLatencyBoost )
	{
		SetConVarInt( "settings_reflex", 1 )
	} else if( lowLatency && lowLatencyBoost )
	{
		SetConVarInt( "settings_reflex", 2 )
	}
}